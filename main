#MODEL
class Vanilla(torch.nn.Module):
    def __init__(self):
        super(Vanilla, self).__init__()
        self.linear_1 = torch.nn.Linear(159, 53)
        self.linear_2 = torch.nn.Linear(53,110)
        self.linear_3 = torch.nn.Linear(110,199)
        self.linear_4 = torch.nn.Linear(199,2)
        self.selu = torch.nn.SELU()
        self.softmax = torch.nn.Softmax(dim=1)
    def forward(self, x):
        x = self.linear_1(x)
        x = self.selu(x)
        x = self.linear_2(x)
        x = self.selu(x)
        x = self.linear_3(x)
        x = self.selu(x)
        x = self.linear_4(x)
        pred = self.softmax(x)
        return pred

device = torch.device('cuda')
model = Vanilla()

#loading in the data
X = array 
y = mortality_array

#impute the missing data
imputer = SimpleImputer()
imputer.fit(X) #Fits the imputer on X and return self.
X_impute = imputer.transform(X) #Imputes all missing values in X.

#scaling the data with sklearn
XScaled = preprocessing.StandardScaler().fit_transform(X_impute)

#splitting train and test data
X_train, X_test, y_train, y_test = train_test_split(
        XScaled, y, test_size = 0.20)

#Smote the data
smote = SMOTE()
X_train, y_trainz = smote.fit_resample(X_train, y_train)

#Check the percentages of the actual and train values to see if they are comparable
#y_test_count = np.count_nonzero(y_test == 1)
#y_count = np.count_nonzero(y == 1)

#y_test_count_zeroes = np.count_nonzero(y_test == 0)
#y_count_zeroes = np.count_nonzero(y == 0)

# For y, 94.21% is 0 (alive) and 5.79% is 1 (expired)
# For y_test, 94.28% is 0 (alive) and 5.72% is 1 (expired)
#%%
model.to(device)
# # Make k-fold cross validation using scikit learn cv 
kf = KFold(n_splits = 10)
kf.get_n_splits(XScaled)
batch_size = 64

for train_index, test_index in kf.split(XScaled):    
    print("TRAIN: ", train_index, "TEST:  ", test_index)
    X_train_fold, X_test_fold = XScaled[train_index], XScaled[test_index]
    y_train_fold, y_test_fold = y[train_index], y[test_index]
    
    train = torch.utils.data.TensorDataset(torch.from_numpy(X_train_fold), torch.from_numpy(y_train_fold))
    test = torch.utils.data.TensorDataset(torch.from_numpy(X_test_fold), torch.from_numpy(y_test_fold))
    train_load = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=False)
    test_load = torch.utils.data.DataLoader(test, batch_size=batch_size, shuffle=False)
    
    # compute a gradient according to a given loss function
    criterion = torch.nn.CrossEntropyLoss()
    
    #update the weights
    optimizer = torch.optim.SGD(model.parameters(), lr=0.4457, 
                            momentum=0.8832,weight_decay=0.001212, 
                            nesterov=True)
    
    number_epoch = 10
    print_iter = 10
    
    for epoch in range (number_epoch):
        total_train_loss = 0
        model.to(device)
        model.train()
        
        #optimizer
        optimizer.zero_grad() 
        optimizer.step()
        
        image = torch.from_numpy(X_train)
        image = image.float()
        image = image.to(device)
        
        label = torch.from_numpy(y_trainz)
        label = label.long()
        label = label.to(device)

        optimizer.zero_grad()
    
        pred = model(image)

        loss = criterion(pred, label)
        total_train_loss += loss.item()

        loss.backward()
        optimizer.step()

        if(epoch % print_iter == 0 or epoch == number_epoch-1):
            print('\nEpoch: {}/{}, Train Loss: {:.8f}'.format(epoch + 1, number_epoch, total_train_loss))
#------------------------------------------------------------------------------------------------------------------------------#
#Accuracy
correct = 0
total = 0

for data in test_load:
    image, label = data
    image = image.float()
    label = label.float()
    label = label.to(device)
    outputs = model(image.to(device))
    _, predicted = torch.max(outputs.data, 1)
    total += label.size(0)
    correct += (predicted == label).sum().item()

print('Accuracy: %d %%' % (
    100 * correct / total))
#------------------------------------------------------------------------------------------------------------------------------#
#ROC / AUC SCORE
def plot_roc_curve(fpr, tpr):
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend()
    plt.show()

y_score = torch.from_numpy(X_test)
y_score = y_score.to(device)
y_score = model(y_score.float())
y_score = y_score[:,1]
with torch.no_grad():
    auc = roc_auc_score(y_test, y_score.cpu())
    print('AUC: %.2f' % auc)
    fpr, tpr, thresholds = roc_curve(y_test, y_score.cpu())
    plot_roc_curve(fpr, tpr)
